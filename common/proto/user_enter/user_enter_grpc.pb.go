// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: user_enter.proto

package user_enter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UserEnter_Apply_FullMethodName                  = "/user_enter.UserEnter/Apply"
	UserEnter_Register_FullMethodName               = "/user_enter.UserEnter/Register"
	UserEnter_Login_FullMethodName                  = "/user_enter.UserEnter/Login"
	UserEnter_AddProduct_FullMethodName             = "/user_enter.UserEnter/AddProduct"
	UserEnter_AddCombinationProduct_FullMethodName  = "/user_enter.UserEnter/AddCombinationProduct"
	UserEnter_ProcessInvoice_FullMethodName         = "/user_enter.UserEnter/ProcessInvoice"
	UserEnter_DelProduct_FullMethodName             = "/user_enter.UserEnter/DelProduct"
	UserEnter_InvoiceList_FullMethodName            = "/user_enter.UserEnter/InvoiceList"
	UserEnter_BatchReleaseOfProducts_FullMethodName = "/user_enter.UserEnter/BatchReleaseOfProducts"
	UserEnter_MerchantVerification_FullMethodName   = "/user_enter.UserEnter/MerchantVerification"
	UserEnter_CalculateOrderSummary_FullMethodName  = "/user_enter.UserEnter/CalculateOrderSummary"
)

// UserEnterClient is the client API for UserEnter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserEnterClient interface {
	Apply(ctx context.Context, in *UserEnterApplyRequest, opts ...grpc.CallOption) (*UserEnterApplyResponse, error)
	Register(ctx context.Context, in *UserEnterRegisterRequest, opts ...grpc.CallOption) (*UserEnterRegisterResponse, error)
	Login(ctx context.Context, in *UserEnterLoginRequest, opts ...grpc.CallOption) (*UserEnterLoginResponse, error)
	AddProduct(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*AddProductResponse, error)
	AddCombinationProduct(ctx context.Context, in *AddCombinationProductRequest, opts ...grpc.CallOption) (*AddCombinationProductResponse, error)
	ProcessInvoice(ctx context.Context, in *ProcessInvoiceRequest, opts ...grpc.CallOption) (*ProcessInvoiceResponse, error)
	DelProduct(ctx context.Context, in *DelProductRequest, opts ...grpc.CallOption) (*DelProductResponse, error)
	InvoiceList(ctx context.Context, in *InvoiceListRequest, opts ...grpc.CallOption) (*InvoiceListResponse, error)
	BatchReleaseOfProducts(ctx context.Context, in *BatchReleaseOfProductsRequest, opts ...grpc.CallOption) (*BatchReleaseOfProductsResponse, error)
	MerchantVerification(ctx context.Context, in *MerchantVerificationRequest, opts ...grpc.CallOption) (*MerchantVerificationResponse, error)
	CalculateOrderSummary(ctx context.Context, in *CalculateOrderSummaryRequest, opts ...grpc.CallOption) (*CalculateOrderSummaryResponse, error)
}

type userEnterClient struct {
	cc grpc.ClientConnInterface
}

func NewUserEnterClient(cc grpc.ClientConnInterface) UserEnterClient {
	return &userEnterClient{cc}
}

func (c *userEnterClient) Apply(ctx context.Context, in *UserEnterApplyRequest, opts ...grpc.CallOption) (*UserEnterApplyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserEnterApplyResponse)
	err := c.cc.Invoke(ctx, UserEnter_Apply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userEnterClient) Register(ctx context.Context, in *UserEnterRegisterRequest, opts ...grpc.CallOption) (*UserEnterRegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserEnterRegisterResponse)
	err := c.cc.Invoke(ctx, UserEnter_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userEnterClient) Login(ctx context.Context, in *UserEnterLoginRequest, opts ...grpc.CallOption) (*UserEnterLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserEnterLoginResponse)
	err := c.cc.Invoke(ctx, UserEnter_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userEnterClient) AddProduct(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*AddProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddProductResponse)
	err := c.cc.Invoke(ctx, UserEnter_AddProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userEnterClient) AddCombinationProduct(ctx context.Context, in *AddCombinationProductRequest, opts ...grpc.CallOption) (*AddCombinationProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddCombinationProductResponse)
	err := c.cc.Invoke(ctx, UserEnter_AddCombinationProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userEnterClient) ProcessInvoice(ctx context.Context, in *ProcessInvoiceRequest, opts ...grpc.CallOption) (*ProcessInvoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessInvoiceResponse)
	err := c.cc.Invoke(ctx, UserEnter_ProcessInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userEnterClient) DelProduct(ctx context.Context, in *DelProductRequest, opts ...grpc.CallOption) (*DelProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelProductResponse)
	err := c.cc.Invoke(ctx, UserEnter_DelProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userEnterClient) InvoiceList(ctx context.Context, in *InvoiceListRequest, opts ...grpc.CallOption) (*InvoiceListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InvoiceListResponse)
	err := c.cc.Invoke(ctx, UserEnter_InvoiceList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userEnterClient) BatchReleaseOfProducts(ctx context.Context, in *BatchReleaseOfProductsRequest, opts ...grpc.CallOption) (*BatchReleaseOfProductsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchReleaseOfProductsResponse)
	err := c.cc.Invoke(ctx, UserEnter_BatchReleaseOfProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userEnterClient) MerchantVerification(ctx context.Context, in *MerchantVerificationRequest, opts ...grpc.CallOption) (*MerchantVerificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MerchantVerificationResponse)
	err := c.cc.Invoke(ctx, UserEnter_MerchantVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userEnterClient) CalculateOrderSummary(ctx context.Context, in *CalculateOrderSummaryRequest, opts ...grpc.CallOption) (*CalculateOrderSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculateOrderSummaryResponse)
	err := c.cc.Invoke(ctx, UserEnter_CalculateOrderSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserEnterServer is the server API for UserEnter service.
// All implementations must embed UnimplementedUserEnterServer
// for forward compatibility
type UserEnterServer interface {
	Apply(context.Context, *UserEnterApplyRequest) (*UserEnterApplyResponse, error)
	Register(context.Context, *UserEnterRegisterRequest) (*UserEnterRegisterResponse, error)
	Login(context.Context, *UserEnterLoginRequest) (*UserEnterLoginResponse, error)
	AddProduct(context.Context, *AddProductRequest) (*AddProductResponse, error)
	AddCombinationProduct(context.Context, *AddCombinationProductRequest) (*AddCombinationProductResponse, error)
	ProcessInvoice(context.Context, *ProcessInvoiceRequest) (*ProcessInvoiceResponse, error)
	DelProduct(context.Context, *DelProductRequest) (*DelProductResponse, error)
	InvoiceList(context.Context, *InvoiceListRequest) (*InvoiceListResponse, error)
	BatchReleaseOfProducts(context.Context, *BatchReleaseOfProductsRequest) (*BatchReleaseOfProductsResponse, error)
	MerchantVerification(context.Context, *MerchantVerificationRequest) (*MerchantVerificationResponse, error)
	CalculateOrderSummary(context.Context, *CalculateOrderSummaryRequest) (*CalculateOrderSummaryResponse, error)
	mustEmbedUnimplementedUserEnterServer()
}

// UnimplementedUserEnterServer must be embedded to have forward compatible implementations.
type UnimplementedUserEnterServer struct {
}

func (UnimplementedUserEnterServer) Apply(context.Context, *UserEnterApplyRequest) (*UserEnterApplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apply not implemented")
}
func (UnimplementedUserEnterServer) Register(context.Context, *UserEnterRegisterRequest) (*UserEnterRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserEnterServer) Login(context.Context, *UserEnterLoginRequest) (*UserEnterLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserEnterServer) AddProduct(context.Context, *AddProductRequest) (*AddProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProduct not implemented")
}
func (UnimplementedUserEnterServer) AddCombinationProduct(context.Context, *AddCombinationProductRequest) (*AddCombinationProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCombinationProduct not implemented")
}
func (UnimplementedUserEnterServer) ProcessInvoice(context.Context, *ProcessInvoiceRequest) (*ProcessInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessInvoice not implemented")
}
func (UnimplementedUserEnterServer) DelProduct(context.Context, *DelProductRequest) (*DelProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelProduct not implemented")
}
func (UnimplementedUserEnterServer) InvoiceList(context.Context, *InvoiceListRequest) (*InvoiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvoiceList not implemented")
}
func (UnimplementedUserEnterServer) BatchReleaseOfProducts(context.Context, *BatchReleaseOfProductsRequest) (*BatchReleaseOfProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchReleaseOfProducts not implemented")
}
func (UnimplementedUserEnterServer) MerchantVerification(context.Context, *MerchantVerificationRequest) (*MerchantVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MerchantVerification not implemented")
}
func (UnimplementedUserEnterServer) CalculateOrderSummary(context.Context, *CalculateOrderSummaryRequest) (*CalculateOrderSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateOrderSummary not implemented")
}
func (UnimplementedUserEnterServer) mustEmbedUnimplementedUserEnterServer() {}

// UnsafeUserEnterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserEnterServer will
// result in compilation errors.
type UnsafeUserEnterServer interface {
	mustEmbedUnimplementedUserEnterServer()
}

func RegisterUserEnterServer(s grpc.ServiceRegistrar, srv UserEnterServer) {
	s.RegisterService(&UserEnter_ServiceDesc, srv)
}

func _UserEnter_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEnterApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserEnterServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserEnter_Apply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserEnterServer).Apply(ctx, req.(*UserEnterApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserEnter_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEnterRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserEnterServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserEnter_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserEnterServer).Register(ctx, req.(*UserEnterRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserEnter_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEnterLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserEnterServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserEnter_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserEnterServer).Login(ctx, req.(*UserEnterLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserEnter_AddProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserEnterServer).AddProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserEnter_AddProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserEnterServer).AddProduct(ctx, req.(*AddProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserEnter_AddCombinationProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCombinationProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserEnterServer).AddCombinationProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserEnter_AddCombinationProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserEnterServer).AddCombinationProduct(ctx, req.(*AddCombinationProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserEnter_ProcessInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserEnterServer).ProcessInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserEnter_ProcessInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserEnterServer).ProcessInvoice(ctx, req.(*ProcessInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserEnter_DelProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserEnterServer).DelProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserEnter_DelProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserEnterServer).DelProduct(ctx, req.(*DelProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserEnter_InvoiceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvoiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserEnterServer).InvoiceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserEnter_InvoiceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserEnterServer).InvoiceList(ctx, req.(*InvoiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserEnter_BatchReleaseOfProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchReleaseOfProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserEnterServer).BatchReleaseOfProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserEnter_BatchReleaseOfProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserEnterServer).BatchReleaseOfProducts(ctx, req.(*BatchReleaseOfProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserEnter_MerchantVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserEnterServer).MerchantVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserEnter_MerchantVerification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserEnterServer).MerchantVerification(ctx, req.(*MerchantVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserEnter_CalculateOrderSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateOrderSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserEnterServer).CalculateOrderSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserEnter_CalculateOrderSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserEnterServer).CalculateOrderSummary(ctx, req.(*CalculateOrderSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserEnter_ServiceDesc is the grpc.ServiceDesc for UserEnter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserEnter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_enter.UserEnter",
	HandlerType: (*UserEnterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Apply",
			Handler:    _UserEnter_Apply_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _UserEnter_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UserEnter_Login_Handler,
		},
		{
			MethodName: "AddProduct",
			Handler:    _UserEnter_AddProduct_Handler,
		},
		{
			MethodName: "AddCombinationProduct",
			Handler:    _UserEnter_AddCombinationProduct_Handler,
		},
		{
			MethodName: "ProcessInvoice",
			Handler:    _UserEnter_ProcessInvoice_Handler,
		},
		{
			MethodName: "DelProduct",
			Handler:    _UserEnter_DelProduct_Handler,
		},
		{
			MethodName: "InvoiceList",
			Handler:    _UserEnter_InvoiceList_Handler,
		},
		{
			MethodName: "BatchReleaseOfProducts",
			Handler:    _UserEnter_BatchReleaseOfProducts_Handler,
		},
		{
			MethodName: "MerchantVerification",
			Handler:    _UserEnter_MerchantVerification_Handler,
		},
		{
			MethodName: "CalculateOrderSummary",
			Handler:    _UserEnter_CalculateOrderSummary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_enter.proto",
}
