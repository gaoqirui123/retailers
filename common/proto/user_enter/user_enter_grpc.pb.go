// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: user_enter.proto

package user_enter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UserEnter_Register_FullMethodName   = "/user_enter.UserEnter/Register"
	UserEnter_AddProduct_FullMethodName = "/user_enter.UserEnter/AddProduct"
)

// UserEnterClient is the client API for UserEnter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserEnterClient interface {
	Register(ctx context.Context, in *UserEnterRegisterRequest, opts ...grpc.CallOption) (*UserEnterRegisterResponse, error)
	AddProduct(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*AddProductResponse, error)
}

type userEnterClient struct {
	cc grpc.ClientConnInterface
}

func NewUserEnterClient(cc grpc.ClientConnInterface) UserEnterClient {
	return &userEnterClient{cc}
}

func (c *userEnterClient) Register(ctx context.Context, in *UserEnterRegisterRequest, opts ...grpc.CallOption) (*UserEnterRegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserEnterRegisterResponse)
	err := c.cc.Invoke(ctx, UserEnter_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userEnterClient) AddProduct(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*AddProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddProductResponse)
	err := c.cc.Invoke(ctx, UserEnter_AddProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserEnterServer is the server API for UserEnter service.
// All implementations must embed UnimplementedUserEnterServer
// for forward compatibility
type UserEnterServer interface {
	Register(context.Context, *UserEnterRegisterRequest) (*UserEnterRegisterResponse, error)
	AddProduct(context.Context, *AddProductRequest) (*AddProductResponse, error)
	mustEmbedUnimplementedUserEnterServer()
}

// UnimplementedUserEnterServer must be embedded to have forward compatible implementations.
type UnimplementedUserEnterServer struct {
}

func (UnimplementedUserEnterServer) Register(context.Context, *UserEnterRegisterRequest) (*UserEnterRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserEnterServer) AddProduct(context.Context, *AddProductRequest) (*AddProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProduct not implemented")
}
func (UnimplementedUserEnterServer) mustEmbedUnimplementedUserEnterServer() {}

// UnsafeUserEnterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserEnterServer will
// result in compilation errors.
type UnsafeUserEnterServer interface {
	mustEmbedUnimplementedUserEnterServer()
}

func RegisterUserEnterServer(s grpc.ServiceRegistrar, srv UserEnterServer) {
	s.RegisterService(&UserEnter_ServiceDesc, srv)
}

func _UserEnter_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEnterRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserEnterServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserEnter_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserEnterServer).Register(ctx, req.(*UserEnterRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserEnter_AddProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserEnterServer).AddProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserEnter_AddProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserEnterServer).AddProduct(ctx, req.(*AddProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserEnter_ServiceDesc is the grpc.ServiceDesc for UserEnter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserEnter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_enter.UserEnter",
	HandlerType: (*UserEnterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _UserEnter_Register_Handler,
		},
		{
			MethodName: "AddProduct",
			Handler:    _UserEnter_AddProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_enter.proto",
}
