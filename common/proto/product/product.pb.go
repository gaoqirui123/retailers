// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v3.19.4
// source: product.proto

package product

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CombinationListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CombinationListRequest) Reset() {
	*x = CombinationListRequest{}
	mi := &file_product_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CombinationListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CombinationListRequest) ProtoMessage() {}

func (x *CombinationListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CombinationListRequest.ProtoReflect.Descriptor instead.
func (*CombinationListRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{0}
}

type CombinationListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	List          []*CombinationList     `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CombinationListResponse) Reset() {
	*x = CombinationListResponse{}
	mi := &file_product_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CombinationListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CombinationListResponse) ProtoMessage() {}

func (x *CombinationListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CombinationListResponse.ProtoReflect.Descriptor instead.
func (*CombinationListResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{1}
}

func (x *CombinationListResponse) GetList() []*CombinationList {
	if x != nil {
		return x.List
	}
	return nil
}

type CombinationList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Image         string                 `protobuf:"bytes,1,opt,name=Image,proto3" json:"Image,omitempty"`    //图片
	Title         string                 `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`    //活动标题
	People        int64                  `protobuf:"varint,3,opt,name=People,proto3" json:"People,omitempty"` //参团人数
	Price         float32                `protobuf:"fixed32,4,opt,name=Price,proto3" json:"Price,omitempty"`  //价格
	Stock         int64                  `protobuf:"varint,5,opt,name=Stock,proto3" json:"Stock,omitempty"`   //库存
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CombinationList) Reset() {
	*x = CombinationList{}
	mi := &file_product_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CombinationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CombinationList) ProtoMessage() {}

func (x *CombinationList) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CombinationList.ProtoReflect.Descriptor instead.
func (*CombinationList) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{2}
}

func (x *CombinationList) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *CombinationList) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CombinationList) GetPeople() int64 {
	if x != nil {
		return x.People
	}
	return 0
}

func (x *CombinationList) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *CombinationList) GetStock() int64 {
	if x != nil {
		return x.Stock
	}
	return 0
}

// TODO:用户参与拼团
type JoinGroupBuyingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           int64                  `protobuf:"varint,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
	PinkId        string                 `protobuf:"bytes,2,opt,name=PinkId,proto3" json:"PinkId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinGroupBuyingRequest) Reset() {
	*x = JoinGroupBuyingRequest{}
	mi := &file_product_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinGroupBuyingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinGroupBuyingRequest) ProtoMessage() {}

func (x *JoinGroupBuyingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinGroupBuyingRequest.ProtoReflect.Descriptor instead.
func (*JoinGroupBuyingRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{3}
}

func (x *JoinGroupBuyingRequest) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *JoinGroupBuyingRequest) GetPinkId() string {
	if x != nil {
		return x.PinkId
	}
	return ""
}

type JoinGroupBuyingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinGroupBuyingResponse) Reset() {
	*x = JoinGroupBuyingResponse{}
	mi := &file_product_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinGroupBuyingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinGroupBuyingResponse) ProtoMessage() {}

func (x *JoinGroupBuyingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinGroupBuyingResponse.ProtoReflect.Descriptor instead.
func (*JoinGroupBuyingResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{4}
}

func (x *JoinGroupBuyingResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// TODO:用户发起拼团
type GroupBuyingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           int64                  `protobuf:"varint,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
	Pid           int64                  `protobuf:"varint,2,opt,name=Pid,proto3" json:"Pid,omitempty"`
	Num           int64                  `protobuf:"varint,3,opt,name=Num,proto3" json:"Num,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GroupBuyingRequest) Reset() {
	*x = GroupBuyingRequest{}
	mi := &file_product_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupBuyingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupBuyingRequest) ProtoMessage() {}

func (x *GroupBuyingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupBuyingRequest.ProtoReflect.Descriptor instead.
func (*GroupBuyingRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{5}
}

func (x *GroupBuyingRequest) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *GroupBuyingRequest) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *GroupBuyingRequest) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

type GroupBuyingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GroupBuyingResponse) Reset() {
	*x = GroupBuyingResponse{}
	mi := &file_product_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupBuyingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupBuyingResponse) ProtoMessage() {}

func (x *GroupBuyingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupBuyingResponse.ProtoReflect.Descriptor instead.
func (*GroupBuyingResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{6}
}

func (x *GroupBuyingResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// 创建砍价商品信息
type BargainCreateRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	UserID          uint32                 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`                     // 必填，标识发起砍价的用户 ID
	ProductId       uint32                 `protobuf:"varint,2,opt,name=ProductId,proto3" json:"ProductId,omitempty"`               // 与砍价活动关联的商品 ID
	Title           string                 `protobuf:"bytes,3,opt,name=Title,proto3" json:"Title,omitempty"`                        // 砍价活动的名称
	Image           string                 `protobuf:"bytes,4,opt,name=Image,proto3" json:"Image,omitempty"`                        // 砍价活动对应的图片地址
	UnitName        string                 `protobuf:"bytes,5,opt,name=UnitName,proto3" json:"UnitName,omitempty"`                  // 商品的单位名称
	Stock           uint32                 `protobuf:"varint,6,opt,name=Stock,proto3" json:"Stock,omitempty"`                       // 参与砍价商品的库存数量
	Images          string                 `protobuf:"bytes,7,opt,name=Images,proto3" json:"Images,omitempty"`                      // 砍价商品的轮播图信息（如图片地址列表等）
	Price           float64                `protobuf:"fixed64,8,opt,name=Price,proto3" json:"Price,omitempty"`                      // 砍价金额，对应数据库 decimal 类型，使用 double 保证精度
	MinPrice        float64                `protobuf:"fixed64,9,opt,name=MinPrice,proto3" json:"MinPrice,omitempty"`                // 砍价商品的最低价格，对应数据库 decimal 类型，使用 double 保证精度
	Num             uint32                 `protobuf:"varint,10,opt,name=Num,proto3" json:"Num,omitempty"`                          // 每次购买砍价商品的数量
	BargainMaxPrice float64                `protobuf:"fixed64,11,opt,name=BargainMaxPrice,proto3" json:"BargainMaxPrice,omitempty"` // 用户每次砍价可达到的最大金额，对应数据库 decimal 类型，使用 double 保证精度
	BargainMinPrice float64                `protobuf:"fixed64,12,opt,name=BargainMinPrice,proto3" json:"BargainMinPrice,omitempty"` // 用户每次砍价可达到的最小金额，对应数据库 decimal 类型，使用 double 保证精度
	BargainNum      uint32                 `protobuf:"varint,13,opt,name=BargainNum,proto3" json:"BargainNum,omitempty"`            // 用户每次砍价的次数
	Status          uint32                 `protobuf:"varint,14,opt,name=Status,proto3" json:"Status,omitempty"`                    // 砍价状态，0 表示到砍价时间不自动开启，1 表示到砍价时间自动开启
	GiveIntegral    float64                `protobuf:"fixed64,15,opt,name=GiveIntegral,proto3" json:"GiveIntegral,omitempty"`       // 参与砍价成功后返还的积分数量，对应数据库 decimal 类型，使用 double 保证精度
	Info            string                 `protobuf:"bytes,16,opt,name=Info,proto3" json:"Info,omitempty"`                         // 砍价活动的详细介绍信息
	IsPostage       uint32                 `protobuf:"varint,17,opt,name=IsPostage,proto3" json:"IsPostage,omitempty"`              // 是否包邮标识，0 为不包邮，1 为包邮
	Postage         float64                `protobuf:"fixed64,18,opt,name=Postage,proto3" json:"Postage,omitempty"`                 // 商品的邮费金额，对应数据库 decimal 类型，使用 double 保证精度
	Rule            string                 `protobuf:"bytes,19,opt,name=Rule,proto3" json:"Rule,omitempty"`                         // 砍价活动的具体规则说明
	StoreName       string                 `protobuf:"bytes,20,opt,name=StoreName,proto3" json:"StoreName,omitempty"`               // 砍价商品所属店铺或商家名称
	TempId          int32                  `protobuf:"varint,21,opt,name=TempId,proto3" json:"TempId,omitempty"`                    // 运费模板 ID
	Cost            float64                `protobuf:"fixed64,22,opt,name=Cost,proto3" json:"Cost,omitempty"`                       // 成本价
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BargainCreateRequest) Reset() {
	*x = BargainCreateRequest{}
	mi := &file_product_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BargainCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BargainCreateRequest) ProtoMessage() {}

func (x *BargainCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BargainCreateRequest.ProtoReflect.Descriptor instead.
func (*BargainCreateRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{7}
}

func (x *BargainCreateRequest) GetUserID() uint32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *BargainCreateRequest) GetProductId() uint32 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *BargainCreateRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *BargainCreateRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *BargainCreateRequest) GetUnitName() string {
	if x != nil {
		return x.UnitName
	}
	return ""
}

func (x *BargainCreateRequest) GetStock() uint32 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *BargainCreateRequest) GetImages() string {
	if x != nil {
		return x.Images
	}
	return ""
}

func (x *BargainCreateRequest) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *BargainCreateRequest) GetMinPrice() float64 {
	if x != nil {
		return x.MinPrice
	}
	return 0
}

func (x *BargainCreateRequest) GetNum() uint32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *BargainCreateRequest) GetBargainMaxPrice() float64 {
	if x != nil {
		return x.BargainMaxPrice
	}
	return 0
}

func (x *BargainCreateRequest) GetBargainMinPrice() float64 {
	if x != nil {
		return x.BargainMinPrice
	}
	return 0
}

func (x *BargainCreateRequest) GetBargainNum() uint32 {
	if x != nil {
		return x.BargainNum
	}
	return 0
}

func (x *BargainCreateRequest) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *BargainCreateRequest) GetGiveIntegral() float64 {
	if x != nil {
		return x.GiveIntegral
	}
	return 0
}

func (x *BargainCreateRequest) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *BargainCreateRequest) GetIsPostage() uint32 {
	if x != nil {
		return x.IsPostage
	}
	return 0
}

func (x *BargainCreateRequest) GetPostage() float64 {
	if x != nil {
		return x.Postage
	}
	return 0
}

func (x *BargainCreateRequest) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

func (x *BargainCreateRequest) GetStoreName() string {
	if x != nil {
		return x.StoreName
	}
	return ""
}

func (x *BargainCreateRequest) GetTempId() int32 {
	if x != nil {
		return x.TempId
	}
	return 0
}

func (x *BargainCreateRequest) GetCost() float64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

type BargainCreateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"` // 砍价商品ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BargainCreateResponse) Reset() {
	*x = BargainCreateResponse{}
	mi := &file_product_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BargainCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BargainCreateResponse) ProtoMessage() {}

func (x *BargainCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BargainCreateResponse.ProtoReflect.Descriptor instead.
func (*BargainCreateResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{8}
}

func (x *BargainCreateResponse) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 修改商品表是否砍价状态
type ProductUpdateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`                                // 商品ID
	IsBargain     int32                  `protobuf:"varint,2,opt,name=is_bargain,json=isBargain,proto3" json:"is_bargain,omitempty"` //是否砍价
	UserID        uint32                 `protobuf:"varint,3,opt,name=UserID,proto3" json:"UserID,omitempty"`                        // 必填，标识发起砍价的用户 ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductUpdateRequest) Reset() {
	*x = ProductUpdateRequest{}
	mi := &file_product_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductUpdateRequest) ProtoMessage() {}

func (x *ProductUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductUpdateRequest.ProtoReflect.Descriptor instead.
func (*ProductUpdateRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{9}
}

func (x *ProductUpdateRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductUpdateRequest) GetIsBargain() int32 {
	if x != nil {
		return x.IsBargain
	}
	return 0
}

func (x *ProductUpdateRequest) GetUserID() uint32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type ProductUpdateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`                                // 商品ID
	IsBargain     int32                  `protobuf:"varint,2,opt,name=is_bargain,json=isBargain,proto3" json:"is_bargain,omitempty"` //是否砍价
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductUpdateResponse) Reset() {
	*x = ProductUpdateResponse{}
	mi := &file_product_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductUpdateResponse) ProtoMessage() {}

func (x *ProductUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductUpdateResponse.ProtoReflect.Descriptor instead.
func (*ProductUpdateResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{10}
}

func (x *ProductUpdateResponse) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductUpdateResponse) GetIsBargain() int32 {
	if x != nil {
		return x.IsBargain
	}
	return 0
}

// 修改砍价商品表是否删除
type BargainUpdateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`       // 砍价商品ID
	IsDel         uint32                 `protobuf:"varint,2,opt,name=IsDel,proto3" json:"IsDel,omitempty"` //是否删除
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BargainUpdateRequest) Reset() {
	*x = BargainUpdateRequest{}
	mi := &file_product_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BargainUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BargainUpdateRequest) ProtoMessage() {}

func (x *BargainUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BargainUpdateRequest.ProtoReflect.Descriptor instead.
func (*BargainUpdateRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{11}
}

func (x *BargainUpdateRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BargainUpdateRequest) GetIsDel() uint32 {
	if x != nil {
		return x.IsDel
	}
	return 0
}

type BargainUpdateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`       // 砍价商品ID
	IsDel         uint32                 `protobuf:"varint,2,opt,name=IsDel,proto3" json:"IsDel,omitempty"` //是否删除
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BargainUpdateResponse) Reset() {
	*x = BargainUpdateResponse{}
	mi := &file_product_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BargainUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BargainUpdateResponse) ProtoMessage() {}

func (x *BargainUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BargainUpdateResponse.ProtoReflect.Descriptor instead.
func (*BargainUpdateResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{12}
}

func (x *BargainUpdateResponse) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BargainUpdateResponse) GetIsDel() uint32 {
	if x != nil {
		return x.IsDel
	}
	return 0
}

// 砍价商品表详情
type BargainShowRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"` // 砍价商品ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BargainShowRequest) Reset() {
	*x = BargainShowRequest{}
	mi := &file_product_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BargainShowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BargainShowRequest) ProtoMessage() {}

func (x *BargainShowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BargainShowRequest.ProtoReflect.Descriptor instead.
func (*BargainShowRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{13}
}

func (x *BargainShowRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type BargainShowResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              uint32                 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`                             // 砍价商品ID
	ProductId       uint32                 `protobuf:"varint,2,opt,name=ProductId,proto3" json:"ProductId,omitempty"`               // 关联商品ID
	Title           string                 `protobuf:"bytes,3,opt,name=Title,proto3" json:"Title,omitempty"`                        // 砍价活动名称
	Image           string                 `protobuf:"bytes,4,opt,name=Image,proto3" json:"Image,omitempty"`                        // 砍价活动图片
	UnitName        string                 `protobuf:"bytes,5,opt,name=UnitName,proto3" json:"UnitName,omitempty"`                  // 单位名称
	Stock           int32                  `protobuf:"varint,6,opt,name=Stock,proto3" json:"Stock,omitempty"`                       // 库存
	Sales           int32                  `protobuf:"varint,7,opt,name=Sales,proto3" json:"Sales,omitempty"`                       // 销量
	Images          string                 `protobuf:"bytes,8,opt,name=Images,proto3" json:"Images,omitempty"`                      // 砍价商品轮播图
	StartTime       int32                  `protobuf:"varint,9,opt,name=StartTime,proto3" json:"StartTime,omitempty"`               // 砍价开启时间
	StopTime        int32                  `protobuf:"varint,10,opt,name=StopTime,proto3" json:"StopTime,omitempty"`                // 砍价结束时间
	StoreName       string                 `protobuf:"bytes,11,opt,name=StoreName,proto3" json:"StoreName,omitempty"`               // 砍价商品名称
	Price           float64                `protobuf:"fixed64,12,opt,name=Price,proto3" json:"Price,omitempty"`                     // 砍价金额
	MinPrice        float64                `protobuf:"fixed64,13,opt,name=MinPrice,proto3" json:"MinPrice,omitempty"`               // 砍价商品最低价
	Num             int32                  `protobuf:"varint,14,opt,name=Num,proto3" json:"Num,omitempty"`                          // 每次购买的砍价商品数量
	BargainMaxPrice float64                `protobuf:"fixed64,15,opt,name=BargainMaxPrice,proto3" json:"BargainMaxPrice,omitempty"` // 用户每次砍价的最大金额
	BargainMinPrice float64                `protobuf:"fixed64,16,opt,name=BargainMinPrice,proto3" json:"BargainMinPrice,omitempty"` // 用户每次砍价的最小金额
	BargainNum      int32                  `protobuf:"varint,17,opt,name=BargainNum,proto3" json:"BargainNum,omitempty"`            // 用户每次砍价的次数
	Status          uint32                 `protobuf:"varint,18,opt,name=Status,proto3" json:"Status,omitempty"`                    // 砍价状态 0(到砍价时间不自动开启)  1(到砍价时间自动开启时间)
	GiveIntegral    float64                `protobuf:"fixed64,19,opt,name=GiveIntegral,proto3" json:"GiveIntegral,omitempty"`       // 反多少积分
	Info            string                 `protobuf:"bytes,20,opt,name=Info,proto3" json:"Info,omitempty"`                         // 砍价活动简介
	Cost            float64                `protobuf:"fixed64,21,opt,name=Cost,proto3" json:"Cost,omitempty"`                       // 成本价
	Sort            int32                  `protobuf:"varint,22,opt,name=Sort,proto3" json:"Sort,omitempty"`                        // 排序
	IsHot           uint32                 `protobuf:"varint,23,opt,name=IsHot,proto3" json:"IsHot,omitempty"`                      // 是否推荐0不推荐1推荐
	IsDel           uint32                 `protobuf:"varint,24,opt,name=IsDel,proto3" json:"IsDel,omitempty"`                      // 是否删除 0未删除 1删除
	AddTime         int32                  `protobuf:"varint,25,opt,name=AddTime,proto3" json:"AddTime,omitempty"`                  // 添加时间
	IsPostage       uint32                 `protobuf:"varint,26,opt,name=IsPostage,proto3" json:"IsPostage,omitempty"`              // 是否包邮 0不包邮 1包邮
	Postage         float64                `protobuf:"fixed64,27,opt,name=Postage,proto3" json:"Postage,omitempty"`                 // 邮费
	Rule            string                 `protobuf:"bytes,28,opt,name=Rule,proto3" json:"Rule,omitempty"`                         // 砍价规则
	Look            int32                  `protobuf:"varint,29,opt,name=Look,proto3" json:"Look,omitempty"`                        // 砍价商品浏览量
	Share           int32                  `protobuf:"varint,30,opt,name=Share,proto3" json:"Share,omitempty"`                      // 砍价商品分享量
	TempId          int32                  `protobuf:"varint,31,opt,name=TempId,proto3" json:"TempId,omitempty"`                    // 运费模板ID
	Weight          float64                `protobuf:"fixed64,32,opt,name=Weight,proto3" json:"Weight,omitempty"`                   // 重量
	Volume          float64                `protobuf:"fixed64,33,opt,name=Volume,proto3" json:"Volume,omitempty"`                   // 体积
	Quota           int32                  `protobuf:"varint,34,opt,name=Quota,proto3" json:"Quota,omitempty"`                      // 限购总数
	QuotaShow       int32                  `protobuf:"varint,35,opt,name=QuotaShow,proto3" json:"QuotaShow,omitempty"`              // 限量总数显示
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BargainShowResponse) Reset() {
	*x = BargainShowResponse{}
	mi := &file_product_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BargainShowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BargainShowResponse) ProtoMessage() {}

func (x *BargainShowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BargainShowResponse.ProtoReflect.Descriptor instead.
func (*BargainShowResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{14}
}

func (x *BargainShowResponse) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BargainShowResponse) GetProductId() uint32 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *BargainShowResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *BargainShowResponse) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *BargainShowResponse) GetUnitName() string {
	if x != nil {
		return x.UnitName
	}
	return ""
}

func (x *BargainShowResponse) GetStock() int32 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *BargainShowResponse) GetSales() int32 {
	if x != nil {
		return x.Sales
	}
	return 0
}

func (x *BargainShowResponse) GetImages() string {
	if x != nil {
		return x.Images
	}
	return ""
}

func (x *BargainShowResponse) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *BargainShowResponse) GetStopTime() int32 {
	if x != nil {
		return x.StopTime
	}
	return 0
}

func (x *BargainShowResponse) GetStoreName() string {
	if x != nil {
		return x.StoreName
	}
	return ""
}

func (x *BargainShowResponse) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *BargainShowResponse) GetMinPrice() float64 {
	if x != nil {
		return x.MinPrice
	}
	return 0
}

func (x *BargainShowResponse) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *BargainShowResponse) GetBargainMaxPrice() float64 {
	if x != nil {
		return x.BargainMaxPrice
	}
	return 0
}

func (x *BargainShowResponse) GetBargainMinPrice() float64 {
	if x != nil {
		return x.BargainMinPrice
	}
	return 0
}

func (x *BargainShowResponse) GetBargainNum() int32 {
	if x != nil {
		return x.BargainNum
	}
	return 0
}

func (x *BargainShowResponse) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *BargainShowResponse) GetGiveIntegral() float64 {
	if x != nil {
		return x.GiveIntegral
	}
	return 0
}

func (x *BargainShowResponse) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *BargainShowResponse) GetCost() float64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *BargainShowResponse) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *BargainShowResponse) GetIsHot() uint32 {
	if x != nil {
		return x.IsHot
	}
	return 0
}

func (x *BargainShowResponse) GetIsDel() uint32 {
	if x != nil {
		return x.IsDel
	}
	return 0
}

func (x *BargainShowResponse) GetAddTime() int32 {
	if x != nil {
		return x.AddTime
	}
	return 0
}

func (x *BargainShowResponse) GetIsPostage() uint32 {
	if x != nil {
		return x.IsPostage
	}
	return 0
}

func (x *BargainShowResponse) GetPostage() float64 {
	if x != nil {
		return x.Postage
	}
	return 0
}

func (x *BargainShowResponse) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

func (x *BargainShowResponse) GetLook() int32 {
	if x != nil {
		return x.Look
	}
	return 0
}

func (x *BargainShowResponse) GetShare() int32 {
	if x != nil {
		return x.Share
	}
	return 0
}

func (x *BargainShowResponse) GetTempId() int32 {
	if x != nil {
		return x.TempId
	}
	return 0
}

func (x *BargainShowResponse) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *BargainShowResponse) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *BargainShowResponse) GetQuota() int32 {
	if x != nil {
		return x.Quota
	}
	return 0
}

func (x *BargainShowResponse) GetQuotaShow() int32 {
	if x != nil {
		return x.QuotaShow
	}
	return 0
}

// 砍价商品表列表
type BargainListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BargainListRequest) Reset() {
	*x = BargainListRequest{}
	mi := &file_product_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BargainListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BargainListRequest) ProtoMessage() {}

func (x *BargainListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BargainListRequest.ProtoReflect.Descriptor instead.
func (*BargainListRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{15}
}

type BargainListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BargainList   []*BargainList         `protobuf:"bytes,1,rep,name=BargainList,proto3" json:"BargainList,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BargainListResponse) Reset() {
	*x = BargainListResponse{}
	mi := &file_product_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BargainListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BargainListResponse) ProtoMessage() {}

func (x *BargainListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BargainListResponse.ProtoReflect.Descriptor instead.
func (*BargainListResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{16}
}

func (x *BargainListResponse) GetBargainList() []*BargainList {
	if x != nil {
		return x.BargainList
	}
	return nil
}

type BargainList struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              uint32                 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`                             // 砍价商品ID
	ProductId       uint32                 `protobuf:"varint,2,opt,name=ProductId,proto3" json:"ProductId,omitempty"`               // 关联商品ID
	Title           string                 `protobuf:"bytes,3,opt,name=Title,proto3" json:"Title,omitempty"`                        // 砍价活动名称
	Image           string                 `protobuf:"bytes,4,opt,name=Image,proto3" json:"Image,omitempty"`                        // 砍价活动图片
	UnitName        string                 `protobuf:"bytes,5,opt,name=UnitName,proto3" json:"UnitName,omitempty"`                  // 单位名称
	Stock           int32                  `protobuf:"varint,6,opt,name=Stock,proto3" json:"Stock,omitempty"`                       // 库存
	Sales           int32                  `protobuf:"varint,7,opt,name=Sales,proto3" json:"Sales,omitempty"`                       // 销量
	Images          string                 `protobuf:"bytes,8,opt,name=Images,proto3" json:"Images,omitempty"`                      // 砍价商品轮播图
	StartTime       int32                  `protobuf:"varint,9,opt,name=StartTime,proto3" json:"StartTime,omitempty"`               // 砍价开启时间
	StopTime        int32                  `protobuf:"varint,10,opt,name=StopTime,proto3" json:"StopTime,omitempty"`                // 砍价结束时间
	StoreName       string                 `protobuf:"bytes,11,opt,name=StoreName,proto3" json:"StoreName,omitempty"`               // 砍价商品名称
	Price           float64                `protobuf:"fixed64,12,opt,name=Price,proto3" json:"Price,omitempty"`                     // 砍价金额
	MinPrice        float64                `protobuf:"fixed64,13,opt,name=MinPrice,proto3" json:"MinPrice,omitempty"`               // 砍价商品最低价
	Num             int32                  `protobuf:"varint,14,opt,name=Num,proto3" json:"Num,omitempty"`                          // 每次购买的砍价商品数量
	BargainMaxPrice float64                `protobuf:"fixed64,15,opt,name=BargainMaxPrice,proto3" json:"BargainMaxPrice,omitempty"` // 用户每次砍价的最大金额
	BargainMinPrice float64                `protobuf:"fixed64,16,opt,name=BargainMinPrice,proto3" json:"BargainMinPrice,omitempty"` // 用户每次砍价的最小金额
	BargainNum      int32                  `protobuf:"varint,17,opt,name=BargainNum,proto3" json:"BargainNum,omitempty"`            // 用户每次砍价的次数
	Status          uint32                 `protobuf:"varint,18,opt,name=Status,proto3" json:"Status,omitempty"`                    // 砍价状态 0(到砍价时间不自动开启)  1(到砍价时间自动开启时间)
	GiveIntegral    float64                `protobuf:"fixed64,19,opt,name=GiveIntegral,proto3" json:"GiveIntegral,omitempty"`       // 反多少积分
	Info            string                 `protobuf:"bytes,20,opt,name=Info,proto3" json:"Info,omitempty"`                         // 砍价活动简介
	Cost            float64                `protobuf:"fixed64,21,opt,name=Cost,proto3" json:"Cost,omitempty"`                       // 成本价
	Sort            int32                  `protobuf:"varint,22,opt,name=Sort,proto3" json:"Sort,omitempty"`                        // 排序
	IsHot           uint32                 `protobuf:"varint,23,opt,name=IsHot,proto3" json:"IsHot,omitempty"`                      // 是否推荐0不推荐1推荐
	IsDel           uint32                 `protobuf:"varint,24,opt,name=IsDel,proto3" json:"IsDel,omitempty"`                      // 是否删除 0未删除 1删除
	AddTime         int32                  `protobuf:"varint,25,opt,name=AddTime,proto3" json:"AddTime,omitempty"`                  // 添加时间
	IsPostage       uint32                 `protobuf:"varint,26,opt,name=IsPostage,proto3" json:"IsPostage,omitempty"`              // 是否包邮 0不包邮 1包邮
	Postage         float64                `protobuf:"fixed64,27,opt,name=Postage,proto3" json:"Postage,omitempty"`                 // 邮费
	Rule            string                 `protobuf:"bytes,28,opt,name=Rule,proto3" json:"Rule,omitempty"`                         // 砍价规则
	Look            int32                  `protobuf:"varint,29,opt,name=Look,proto3" json:"Look,omitempty"`                        // 砍价商品浏览量
	Share           int32                  `protobuf:"varint,30,opt,name=Share,proto3" json:"Share,omitempty"`                      // 砍价商品分享量
	TempId          int32                  `protobuf:"varint,31,opt,name=TempId,proto3" json:"TempId,omitempty"`                    // 运费模板ID
	Weight          float64                `protobuf:"fixed64,32,opt,name=Weight,proto3" json:"Weight,omitempty"`                   // 重量
	Volume          float64                `protobuf:"fixed64,33,opt,name=Volume,proto3" json:"Volume,omitempty"`                   // 体积
	Quota           int32                  `protobuf:"varint,34,opt,name=Quota,proto3" json:"Quota,omitempty"`                      // 限购总数
	QuotaShow       int32                  `protobuf:"varint,35,opt,name=QuotaShow,proto3" json:"QuotaShow,omitempty"`              // 限量总数显示
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BargainList) Reset() {
	*x = BargainList{}
	mi := &file_product_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BargainList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BargainList) ProtoMessage() {}

func (x *BargainList) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BargainList.ProtoReflect.Descriptor instead.
func (*BargainList) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{17}
}

func (x *BargainList) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BargainList) GetProductId() uint32 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *BargainList) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *BargainList) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *BargainList) GetUnitName() string {
	if x != nil {
		return x.UnitName
	}
	return ""
}

func (x *BargainList) GetStock() int32 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *BargainList) GetSales() int32 {
	if x != nil {
		return x.Sales
	}
	return 0
}

func (x *BargainList) GetImages() string {
	if x != nil {
		return x.Images
	}
	return ""
}

func (x *BargainList) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *BargainList) GetStopTime() int32 {
	if x != nil {
		return x.StopTime
	}
	return 0
}

func (x *BargainList) GetStoreName() string {
	if x != nil {
		return x.StoreName
	}
	return ""
}

func (x *BargainList) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *BargainList) GetMinPrice() float64 {
	if x != nil {
		return x.MinPrice
	}
	return 0
}

func (x *BargainList) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *BargainList) GetBargainMaxPrice() float64 {
	if x != nil {
		return x.BargainMaxPrice
	}
	return 0
}

func (x *BargainList) GetBargainMinPrice() float64 {
	if x != nil {
		return x.BargainMinPrice
	}
	return 0
}

func (x *BargainList) GetBargainNum() int32 {
	if x != nil {
		return x.BargainNum
	}
	return 0
}

func (x *BargainList) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *BargainList) GetGiveIntegral() float64 {
	if x != nil {
		return x.GiveIntegral
	}
	return 0
}

func (x *BargainList) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *BargainList) GetCost() float64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *BargainList) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *BargainList) GetIsHot() uint32 {
	if x != nil {
		return x.IsHot
	}
	return 0
}

func (x *BargainList) GetIsDel() uint32 {
	if x != nil {
		return x.IsDel
	}
	return 0
}

func (x *BargainList) GetAddTime() int32 {
	if x != nil {
		return x.AddTime
	}
	return 0
}

func (x *BargainList) GetIsPostage() uint32 {
	if x != nil {
		return x.IsPostage
	}
	return 0
}

func (x *BargainList) GetPostage() float64 {
	if x != nil {
		return x.Postage
	}
	return 0
}

func (x *BargainList) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

func (x *BargainList) GetLook() int32 {
	if x != nil {
		return x.Look
	}
	return 0
}

func (x *BargainList) GetShare() int32 {
	if x != nil {
		return x.Share
	}
	return 0
}

func (x *BargainList) GetTempId() int32 {
	if x != nil {
		return x.TempId
	}
	return 0
}

func (x *BargainList) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *BargainList) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *BargainList) GetQuota() int32 {
	if x != nil {
		return x.Quota
	}
	return 0
}

func (x *BargainList) GetQuotaShow() int32 {
	if x != nil {
		return x.QuotaShow
	}
	return 0
}

var File_product_proto protoreflect.FileDescriptor

var file_product_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0x18, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x47, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x0f,
	0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50,
	0x65, 0x6f, 0x70, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x50, 0x65, 0x6f,
	0x70, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x22,
	0x42, 0x0a, 0x16, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x75, 0x79, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x55, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x50,
	0x69, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x69, 0x6e,
	0x6b, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x17, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x75, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x4a, 0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x75, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x55, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x50, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x50,
	0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x4e, 0x75, 0x6d, 0x22, 0x2f, 0x0a, 0x13, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x75, 0x79,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xe0, 0x04, 0x0a, 0x14, 0x42, 0x61, 0x72, 0x67, 0x61, 0x69,
	0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x55, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x55, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x4d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x4e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x4e, 0x75, 0x6d, 0x12, 0x28,
	0x0a, 0x0f, 0x42, 0x61, 0x72, 0x67, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x42, 0x61, 0x72, 0x67, 0x61, 0x69, 0x6e,
	0x4d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x61, 0x72, 0x67,
	0x61, 0x69, 0x6e, 0x4d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x42, 0x61, 0x72, 0x67, 0x61, 0x69, 0x6e, 0x4d, 0x69, 0x6e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x72, 0x67, 0x61, 0x69, 0x6e, 0x4e, 0x75, 0x6d,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x42, 0x61, 0x72, 0x67, 0x61, 0x69, 0x6e, 0x4e,
	0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x47, 0x69,
	0x76, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x47, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x49, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x75,
	0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x54, 0x65, 0x6d, 0x70, 0x49, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x54, 0x65,
	0x6d, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x43, 0x6f, 0x73, 0x74, 0x22, 0x27, 0x0a, 0x15, 0x42, 0x61, 0x72, 0x67,
	0x61, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49,
	0x64, 0x22, 0x5d, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x62, 0x61, 0x72, 0x67, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69,
	0x73, 0x42, 0x61, 0x72, 0x67, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x22, 0x46, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x62, 0x61, 0x72, 0x67, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69,
	0x73, 0x42, 0x61, 0x72, 0x67, 0x61, 0x69, 0x6e, 0x22, 0x3c, 0x0a, 0x14, 0x42, 0x61, 0x72, 0x67,
	0x61, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x22, 0x3d, 0x0a, 0x15, 0x42, 0x61, 0x72, 0x67, 0x61, 0x69,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x49, 0x73, 0x44, 0x65, 0x6c, 0x22, 0x24, 0x0a, 0x12, 0x42, 0x61, 0x72, 0x67, 0x61, 0x69, 0x6e,
	0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x22, 0x8f, 0x07, 0x0a, 0x13,
	0x42, 0x61, 0x72, 0x67, 0x61, 0x69, 0x6e, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x55, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x55, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12,
	0x14, 0x0a, 0x05, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53,
	0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4d,
	0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x4d,
	0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4e, 0x75, 0x6d, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x4e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x61, 0x72,
	0x67, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0f, 0x42, 0x61, 0x72, 0x67, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x61, 0x72, 0x67, 0x61, 0x69, 0x6e, 0x4d, 0x69,
	0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x42, 0x61,
	0x72, 0x67, 0x61, 0x69, 0x6e, 0x4d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x42, 0x61, 0x72, 0x67, 0x61, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x42, 0x61, 0x72, 0x67, 0x61, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x47, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x47, 0x69, 0x76,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x43, 0x6f, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x48, 0x6f, 0x74, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x73, 0x48, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x49,
	0x73, 0x44, 0x65, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x73, 0x44, 0x65,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x41, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49,
	0x73, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x49, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x6f, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x50, 0x6f, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4c, 0x6f, 0x6f, 0x6b, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x4c, 0x6f, 0x6f, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x65, 0x6d, 0x70, 0x49, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x54, 0x65, 0x6d, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12,
	0x1c, 0x0a, 0x09, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x53, 0x68, 0x6f, 0x77, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x53, 0x68, 0x6f, 0x77, 0x22, 0x14, 0x0a,
	0x12, 0x42, 0x61, 0x72, 0x67, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x13, 0x42, 0x61, 0x72, 0x67, 0x61, 0x69, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x42, 0x61,
	0x72, 0x67, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x42, 0x61, 0x72, 0x67, 0x61, 0x69,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x42, 0x61, 0x72, 0x67, 0x61, 0x69, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x87, 0x07, 0x0a, 0x0b, 0x42, 0x61, 0x72, 0x67, 0x61, 0x69, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x55, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x55, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x14,
	0x0a, 0x05, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53,
	0x61, 0x6c, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74,
	0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x74,
	0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x69,
	0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x4d, 0x69,
	0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4e, 0x75, 0x6d, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x4e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x61, 0x72, 0x67,
	0x61, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x42, 0x61, 0x72, 0x67, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x61, 0x72, 0x67, 0x61, 0x69, 0x6e, 0x4d, 0x69, 0x6e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x42, 0x61, 0x72,
	0x67, 0x61, 0x69, 0x6e, 0x4d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x42, 0x61, 0x72, 0x67, 0x61, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x42, 0x61, 0x72, 0x67, 0x61, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x47, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x47, 0x69, 0x76, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x43, 0x6f, 0x73, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x43, 0x6f, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x53, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x48, 0x6f, 0x74, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x73, 0x48, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73,
	0x44, 0x65, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x73, 0x44, 0x65, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x41, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73,
	0x50, 0x6f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x49,
	0x73, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x6f, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x50, 0x6f, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4c, 0x6f, 0x6f, 0x6b, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x4c, 0x6f, 0x6f, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x54, 0x65, 0x6d, 0x70, 0x49, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x54, 0x65, 0x6d, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1c,
	0x0a, 0x09, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x53, 0x68, 0x6f, 0x77, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x53, 0x68, 0x6f, 0x77, 0x32, 0x83, 0x05, 0x0a,
	0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x54, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48,
	0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x75, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x75, 0x79,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x75, 0x79, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0f, 0x4a, 0x6f, 0x69, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x75, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x75, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x75, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e,
	0x0a, 0x0d, 0x42, 0x61, 0x72, 0x67, 0x61, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x42, 0x61, 0x72, 0x67, 0x61, 0x69,
	0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x42, 0x61, 0x72, 0x67, 0x61, 0x69, 0x6e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e,
	0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e,
	0x0a, 0x0d, 0x42, 0x61, 0x72, 0x67, 0x61, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x42, 0x61, 0x72, 0x67, 0x61, 0x69,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x42, 0x61, 0x72, 0x67, 0x61, 0x69, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48,
	0x0a, 0x0b, 0x42, 0x61, 0x72, 0x67, 0x61, 0x69, 0x6e, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x1b, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x42, 0x61, 0x72, 0x67, 0x61, 0x69, 0x6e, 0x53,
	0x68, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2e, 0x42, 0x61, 0x72, 0x67, 0x61, 0x69, 0x6e, 0x53, 0x68, 0x6f, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x42, 0x61, 0x72, 0x67,
	0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x42, 0x61, 0x72, 0x67, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x42,
	0x61, 0x72, 0x67, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_product_proto_rawDescOnce sync.Once
	file_product_proto_rawDescData = file_product_proto_rawDesc
)

func file_product_proto_rawDescGZIP() []byte {
	file_product_proto_rawDescOnce.Do(func() {
		file_product_proto_rawDescData = protoimpl.X.CompressGZIP(file_product_proto_rawDescData)
	})
	return file_product_proto_rawDescData
}

var file_product_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_product_proto_goTypes = []any{
	(*CombinationListRequest)(nil),  // 0: product.CombinationListRequest
	(*CombinationListResponse)(nil), // 1: product.CombinationListResponse
	(*CombinationList)(nil),         // 2: product.CombinationList
	(*JoinGroupBuyingRequest)(nil),  // 3: product.JoinGroupBuyingRequest
	(*JoinGroupBuyingResponse)(nil), // 4: product.JoinGroupBuyingResponse
	(*GroupBuyingRequest)(nil),      // 5: product.GroupBuyingRequest
	(*GroupBuyingResponse)(nil),     // 6: product.GroupBuyingResponse
	(*BargainCreateRequest)(nil),    // 7: product.BargainCreateRequest
	(*BargainCreateResponse)(nil),   // 8: product.BargainCreateResponse
	(*ProductUpdateRequest)(nil),    // 9: product.ProductUpdateRequest
	(*ProductUpdateResponse)(nil),   // 10: product.ProductUpdateResponse
	(*BargainUpdateRequest)(nil),    // 11: product.BargainUpdateRequest
	(*BargainUpdateResponse)(nil),   // 12: product.BargainUpdateResponse
	(*BargainShowRequest)(nil),      // 13: product.BargainShowRequest
	(*BargainShowResponse)(nil),     // 14: product.BargainShowResponse
	(*BargainListRequest)(nil),      // 15: product.BargainListRequest
	(*BargainListResponse)(nil),     // 16: product.BargainListResponse
	(*BargainList)(nil),             // 17: product.BargainList
}
var file_product_proto_depIdxs = []int32{
	2,  // 0: product.CombinationListResponse.list:type_name -> product.CombinationList
	17, // 1: product.BargainListResponse.BargainList:type_name -> product.BargainList
	0,  // 2: product.Product.CombinationList:input_type -> product.CombinationListRequest
	5,  // 3: product.Product.GroupBuying:input_type -> product.GroupBuyingRequest
	3,  // 4: product.Product.JoinGroupBuying:input_type -> product.JoinGroupBuyingRequest
	7,  // 5: product.Product.BargainCreate:input_type -> product.BargainCreateRequest
	9,  // 6: product.Product.ProductUpdate:input_type -> product.ProductUpdateRequest
	11, // 7: product.Product.BargainUpdate:input_type -> product.BargainUpdateRequest
	13, // 8: product.Product.BargainShow:input_type -> product.BargainShowRequest
	15, // 9: product.Product.BargainList:input_type -> product.BargainListRequest
	1,  // 10: product.Product.CombinationList:output_type -> product.CombinationListResponse
	6,  // 11: product.Product.GroupBuying:output_type -> product.GroupBuyingResponse
	4,  // 12: product.Product.JoinGroupBuying:output_type -> product.JoinGroupBuyingResponse
	8,  // 13: product.Product.BargainCreate:output_type -> product.BargainCreateResponse
	10, // 14: product.Product.ProductUpdate:output_type -> product.ProductUpdateResponse
	12, // 15: product.Product.BargainUpdate:output_type -> product.BargainUpdateResponse
	14, // 16: product.Product.BargainShow:output_type -> product.BargainShowResponse
	16, // 17: product.Product.BargainList:output_type -> product.BargainListResponse
	10, // [10:18] is the sub-list for method output_type
	2,  // [2:10] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_product_proto_init() }
func file_product_proto_init() {
	if File_product_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_product_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_product_proto_goTypes,
		DependencyIndexes: file_product_proto_depIdxs,
		MessageInfos:      file_product_proto_msgTypes,
	}.Build()
	File_product_proto = out.File
	file_product_proto_rawDesc = nil
	file_product_proto_goTypes = nil
	file_product_proto_depIdxs = nil
}
