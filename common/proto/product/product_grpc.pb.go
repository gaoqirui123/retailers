// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: product.proto

package product

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Product_CombinationList_FullMethodName = "/product.Product/CombinationList"
	Product_GroupBuying_FullMethodName     = "/product.Product/GroupBuying"
	Product_JoinGroupBuying_FullMethodName = "/product.Product/JoinGroupBuying"
	Product_BargainCreate_FullMethodName   = "/product.Product/BargainCreate"
	Product_ProductUpdate_FullMethodName   = "/product.Product/ProductUpdate"
	Product_BargainUpdate_FullMethodName   = "/product.Product/BargainUpdate"
	Product_BargainShow_FullMethodName     = "/product.Product/BargainShow"
	Product_BargainList_FullMethodName     = "/product.Product/BargainList"
)

// ProductClient is the client API for Product service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductClient interface {
	CombinationList(ctx context.Context, in *CombinationListRequest, opts ...grpc.CallOption) (*CombinationListResponse, error)
	GroupBuying(ctx context.Context, in *GroupBuyingRequest, opts ...grpc.CallOption) (*GroupBuyingResponse, error)
	JoinGroupBuying(ctx context.Context, in *JoinGroupBuyingRequest, opts ...grpc.CallOption) (*JoinGroupBuyingResponse, error)
	BargainCreate(ctx context.Context, in *BargainCreateRequest, opts ...grpc.CallOption) (*BargainCreateResponse, error)
	ProductUpdate(ctx context.Context, in *ProductUpdateRequest, opts ...grpc.CallOption) (*ProductUpdateResponse, error)
	BargainUpdate(ctx context.Context, in *BargainUpdateRequest, opts ...grpc.CallOption) (*BargainUpdateResponse, error)
	BargainShow(ctx context.Context, in *BargainShowRequest, opts ...grpc.CallOption) (*BargainShowResponse, error)
	BargainList(ctx context.Context, in *BargainListRequest, opts ...grpc.CallOption) (*BargainListResponse, error)
}

type productClient struct {
	cc grpc.ClientConnInterface
}

func NewProductClient(cc grpc.ClientConnInterface) ProductClient {
	return &productClient{cc}
}

func (c *productClient) CombinationList(ctx context.Context, in *CombinationListRequest, opts ...grpc.CallOption) (*CombinationListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CombinationListResponse)
	err := c.cc.Invoke(ctx, Product_CombinationList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GroupBuying(ctx context.Context, in *GroupBuyingRequest, opts ...grpc.CallOption) (*GroupBuyingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupBuyingResponse)
	err := c.cc.Invoke(ctx, Product_GroupBuying_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) JoinGroupBuying(ctx context.Context, in *JoinGroupBuyingRequest, opts ...grpc.CallOption) (*JoinGroupBuyingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinGroupBuyingResponse)
	err := c.cc.Invoke(ctx, Product_JoinGroupBuying_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) BargainCreate(ctx context.Context, in *BargainCreateRequest, opts ...grpc.CallOption) (*BargainCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BargainCreateResponse)
	err := c.cc.Invoke(ctx, Product_BargainCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ProductUpdate(ctx context.Context, in *ProductUpdateRequest, opts ...grpc.CallOption) (*ProductUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductUpdateResponse)
	err := c.cc.Invoke(ctx, Product_ProductUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) BargainUpdate(ctx context.Context, in *BargainUpdateRequest, opts ...grpc.CallOption) (*BargainUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BargainUpdateResponse)
	err := c.cc.Invoke(ctx, Product_BargainUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) BargainShow(ctx context.Context, in *BargainShowRequest, opts ...grpc.CallOption) (*BargainShowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BargainShowResponse)
	err := c.cc.Invoke(ctx, Product_BargainShow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) BargainList(ctx context.Context, in *BargainListRequest, opts ...grpc.CallOption) (*BargainListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BargainListResponse)
	err := c.cc.Invoke(ctx, Product_BargainList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServer is the server API for Product service.
// All implementations must embed UnimplementedProductServer
// for forward compatibility.
type ProductServer interface {
	CombinationList(context.Context, *CombinationListRequest) (*CombinationListResponse, error)
	GroupBuying(context.Context, *GroupBuyingRequest) (*GroupBuyingResponse, error)
	JoinGroupBuying(context.Context, *JoinGroupBuyingRequest) (*JoinGroupBuyingResponse, error)
	BargainCreate(context.Context, *BargainCreateRequest) (*BargainCreateResponse, error)
	ProductUpdate(context.Context, *ProductUpdateRequest) (*ProductUpdateResponse, error)
	BargainUpdate(context.Context, *BargainUpdateRequest) (*BargainUpdateResponse, error)
	BargainShow(context.Context, *BargainShowRequest) (*BargainShowResponse, error)
	BargainList(context.Context, *BargainListRequest) (*BargainListResponse, error)
	mustEmbedUnimplementedProductServer()
}

// UnimplementedProductServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductServer struct{}

func (UnimplementedProductServer) CombinationList(context.Context, *CombinationListRequest) (*CombinationListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CombinationList not implemented")
}
func (UnimplementedProductServer) GroupBuying(context.Context, *GroupBuyingRequest) (*GroupBuyingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupBuying not implemented")
}
func (UnimplementedProductServer) JoinGroupBuying(context.Context, *JoinGroupBuyingRequest) (*JoinGroupBuyingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGroupBuying not implemented")
}
func (UnimplementedProductServer) BargainCreate(context.Context, *BargainCreateRequest) (*BargainCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BargainCreate not implemented")
}
func (UnimplementedProductServer) ProductUpdate(context.Context, *ProductUpdateRequest) (*ProductUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductUpdate not implemented")
}
func (UnimplementedProductServer) BargainUpdate(context.Context, *BargainUpdateRequest) (*BargainUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BargainUpdate not implemented")
}
func (UnimplementedProductServer) BargainShow(context.Context, *BargainShowRequest) (*BargainShowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BargainShow not implemented")
}
func (UnimplementedProductServer) BargainList(context.Context, *BargainListRequest) (*BargainListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BargainList not implemented")
}
func (UnimplementedProductServer) mustEmbedUnimplementedProductServer() {}
func (UnimplementedProductServer) testEmbeddedByValue()                 {}

// UnsafeProductServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServer will
// result in compilation errors.
type UnsafeProductServer interface {
	mustEmbedUnimplementedProductServer()
}

func RegisterProductServer(s grpc.ServiceRegistrar, srv ProductServer) {
	// If the following call pancis, it indicates UnimplementedProductServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Product_ServiceDesc, srv)
}

func _Product_CombinationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CombinationListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CombinationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CombinationList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CombinationList(ctx, req.(*CombinationListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GroupBuying_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupBuyingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GroupBuying(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GroupBuying_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GroupBuying(ctx, req.(*GroupBuyingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_JoinGroupBuying_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGroupBuyingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).JoinGroupBuying(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_JoinGroupBuying_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).JoinGroupBuying(ctx, req.(*JoinGroupBuyingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_BargainCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BargainCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).BargainCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_BargainCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).BargainCreate(ctx, req.(*BargainCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ProductUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ProductUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ProductUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ProductUpdate(ctx, req.(*ProductUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_BargainUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BargainUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).BargainUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_BargainUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).BargainUpdate(ctx, req.(*BargainUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_BargainShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BargainShowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).BargainShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_BargainShow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).BargainShow(ctx, req.(*BargainShowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_BargainList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BargainListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).BargainList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_BargainList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).BargainList(ctx, req.(*BargainListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Product_ServiceDesc is the grpc.ServiceDesc for Product service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Product_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.Product",
	HandlerType: (*ProductServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CombinationList",
			Handler:    _Product_CombinationList_Handler,
		},
		{
			MethodName: "GroupBuying",
			Handler:    _Product_GroupBuying_Handler,
		},
		{
			MethodName: "JoinGroupBuying",
			Handler:    _Product_JoinGroupBuying_Handler,
		},
		{
			MethodName: "BargainCreate",
			Handler:    _Product_BargainCreate_Handler,
		},
		{
			MethodName: "ProductUpdate",
			Handler:    _Product_ProductUpdate_Handler,
		},
		{
			MethodName: "BargainUpdate",
			Handler:    _Product_BargainUpdate_Handler,
		},
		{
			MethodName: "BargainShow",
			Handler:    _Product_BargainShow_Handler,
		},
		{
			MethodName: "BargainList",
			Handler:    _Product_BargainList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product.proto",
}
