// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: distribution.proto

package distribution

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Distribution_GenerateInvitationCode_FullMethodName    = "/article.Distribution/GenerateInvitationCode"
	Distribution_UserFillsInInvitationCode_FullMethodName = "/article.Distribution/UserFillsInInvitationCode"
	Distribution_DistributionLevelSetting_FullMethodName  = "/article.Distribution/DistributionLevelSetting"
	Distribution_TheCharts_FullMethodName                 = "/article.Distribution/TheCharts"
)

// DistributionClient is the client API for Distribution service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistributionClient interface {
	GenerateInvitationCode(ctx context.Context, in *GenerateInvitationCodeRequest, opts ...grpc.CallOption) (*GenerateInvitationCodeResponse, error)
	UserFillsInInvitationCode(ctx context.Context, in *UserFillsInInvitationCodeRequest, opts ...grpc.CallOption) (*UserFillsInInvitationCodeResponse, error)
	DistributionLevelSetting(ctx context.Context, in *DistributionLevelSettingRequest, opts ...grpc.CallOption) (*DistributionLevelSettingResponse, error)
	TheCharts(ctx context.Context, in *TheChartsRequest, opts ...grpc.CallOption) (*TheChartsResponse, error)
}

type distributionClient struct {
	cc grpc.ClientConnInterface
}

func NewDistributionClient(cc grpc.ClientConnInterface) DistributionClient {
	return &distributionClient{cc}
}

func (c *distributionClient) GenerateInvitationCode(ctx context.Context, in *GenerateInvitationCodeRequest, opts ...grpc.CallOption) (*GenerateInvitationCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateInvitationCodeResponse)
	err := c.cc.Invoke(ctx, Distribution_GenerateInvitationCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributionClient) UserFillsInInvitationCode(ctx context.Context, in *UserFillsInInvitationCodeRequest, opts ...grpc.CallOption) (*UserFillsInInvitationCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserFillsInInvitationCodeResponse)
	err := c.cc.Invoke(ctx, Distribution_UserFillsInInvitationCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributionClient) DistributionLevelSetting(ctx context.Context, in *DistributionLevelSettingRequest, opts ...grpc.CallOption) (*DistributionLevelSettingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DistributionLevelSettingResponse)
	err := c.cc.Invoke(ctx, Distribution_DistributionLevelSetting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributionClient) TheCharts(ctx context.Context, in *TheChartsRequest, opts ...grpc.CallOption) (*TheChartsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TheChartsResponse)
	err := c.cc.Invoke(ctx, Distribution_TheCharts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistributionServer is the server API for Distribution service.
// All implementations must embed UnimplementedDistributionServer
// for forward compatibility
type DistributionServer interface {
	GenerateInvitationCode(context.Context, *GenerateInvitationCodeRequest) (*GenerateInvitationCodeResponse, error)
	UserFillsInInvitationCode(context.Context, *UserFillsInInvitationCodeRequest) (*UserFillsInInvitationCodeResponse, error)
	DistributionLevelSetting(context.Context, *DistributionLevelSettingRequest) (*DistributionLevelSettingResponse, error)
	TheCharts(context.Context, *TheChartsRequest) (*TheChartsResponse, error)
	mustEmbedUnimplementedDistributionServer()
}

// UnimplementedDistributionServer must be embedded to have forward compatible implementations.
type UnimplementedDistributionServer struct {
}

func (UnimplementedDistributionServer) GenerateInvitationCode(context.Context, *GenerateInvitationCodeRequest) (*GenerateInvitationCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateInvitationCode not implemented")
}
func (UnimplementedDistributionServer) UserFillsInInvitationCode(context.Context, *UserFillsInInvitationCodeRequest) (*UserFillsInInvitationCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFillsInInvitationCode not implemented")
}
func (UnimplementedDistributionServer) DistributionLevelSetting(context.Context, *DistributionLevelSettingRequest) (*DistributionLevelSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DistributionLevelSetting not implemented")
}
func (UnimplementedDistributionServer) TheCharts(context.Context, *TheChartsRequest) (*TheChartsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TheCharts not implemented")
}
func (UnimplementedDistributionServer) mustEmbedUnimplementedDistributionServer() {}

// UnsafeDistributionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistributionServer will
// result in compilation errors.
type UnsafeDistributionServer interface {
	mustEmbedUnimplementedDistributionServer()
}

func RegisterDistributionServer(s grpc.ServiceRegistrar, srv DistributionServer) {
	s.RegisterService(&Distribution_ServiceDesc, srv)
}

func _Distribution_GenerateInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateInvitationCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionServer).GenerateInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Distribution_GenerateInvitationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionServer).GenerateInvitationCode(ctx, req.(*GenerateInvitationCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Distribution_UserFillsInInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFillsInInvitationCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionServer).UserFillsInInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Distribution_UserFillsInInvitationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionServer).UserFillsInInvitationCode(ctx, req.(*UserFillsInInvitationCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Distribution_DistributionLevelSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistributionLevelSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionServer).DistributionLevelSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Distribution_DistributionLevelSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionServer).DistributionLevelSetting(ctx, req.(*DistributionLevelSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Distribution_TheCharts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TheChartsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionServer).TheCharts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Distribution_TheCharts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionServer).TheCharts(ctx, req.(*TheChartsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Distribution_ServiceDesc is the grpc.ServiceDesc for Distribution service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Distribution_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "article.Distribution",
	HandlerType: (*DistributionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateInvitationCode",
			Handler:    _Distribution_GenerateInvitationCode_Handler,
		},
		{
			MethodName: "UserFillsInInvitationCode",
			Handler:    _Distribution_UserFillsInInvitationCode_Handler,
		},
		{
			MethodName: "DistributionLevelSetting",
			Handler:    _Distribution_DistributionLevelSetting_Handler,
		},
		{
			MethodName: "TheCharts",
			Handler:    _Distribution_TheCharts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "distribution.proto",
}
