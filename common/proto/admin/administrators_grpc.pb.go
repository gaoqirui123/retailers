// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: administrators.proto

package administrators

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Administrators_AdminLogin_FullMethodName   = "/administrators.Administrators/AdminLogin"
	Administrators_ProcessEnter_FullMethodName = "/administrators.Administrators/ProcessEnter"
)

// AdministratorsClient is the client API for Administrators service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdministratorsClient interface {
	AdminLogin(ctx context.Context, in *AdminLoginReq, opts ...grpc.CallOption) (*AdminLoginResp, error)
	ProcessEnter(ctx context.Context, in *ProcessEnterReq, opts ...grpc.CallOption) (*ProcessEnterResp, error)
}

type administratorsClient struct {
	cc grpc.ClientConnInterface
}

func NewAdministratorsClient(cc grpc.ClientConnInterface) AdministratorsClient {
	return &administratorsClient{cc}
}

func (c *administratorsClient) AdminLogin(ctx context.Context, in *AdminLoginReq, opts ...grpc.CallOption) (*AdminLoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminLoginResp)
	err := c.cc.Invoke(ctx, Administrators_AdminLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administratorsClient) ProcessEnter(ctx context.Context, in *ProcessEnterReq, opts ...grpc.CallOption) (*ProcessEnterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessEnterResp)
	err := c.cc.Invoke(ctx, Administrators_ProcessEnter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdministratorsServer is the server API for Administrators service.
// All implementations must embed UnimplementedAdministratorsServer
// for forward compatibility
type AdministratorsServer interface {
	AdminLogin(context.Context, *AdminLoginReq) (*AdminLoginResp, error)
	ProcessEnter(context.Context, *ProcessEnterReq) (*ProcessEnterResp, error)
	mustEmbedUnimplementedAdministratorsServer()
}

// UnimplementedAdministratorsServer must be embedded to have forward compatible implementations.
type UnimplementedAdministratorsServer struct {
}

func (UnimplementedAdministratorsServer) AdminLogin(context.Context, *AdminLoginReq) (*AdminLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLogin not implemented")
}
func (UnimplementedAdministratorsServer) ProcessEnter(context.Context, *ProcessEnterReq) (*ProcessEnterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessEnter not implemented")
}
func (UnimplementedAdministratorsServer) mustEmbedUnimplementedAdministratorsServer() {}

// UnsafeAdministratorsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdministratorsServer will
// result in compilation errors.
type UnsafeAdministratorsServer interface {
	mustEmbedUnimplementedAdministratorsServer()
}

func RegisterAdministratorsServer(s grpc.ServiceRegistrar, srv AdministratorsServer) {
	s.RegisterService(&Administrators_ServiceDesc, srv)
}

func _Administrators_AdminLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministratorsServer).AdminLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Administrators_AdminLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministratorsServer).AdminLogin(ctx, req.(*AdminLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administrators_ProcessEnter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessEnterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministratorsServer).ProcessEnter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Administrators_ProcessEnter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministratorsServer).ProcessEnter(ctx, req.(*ProcessEnterReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Administrators_ServiceDesc is the grpc.ServiceDesc for Administrators service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Administrators_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "administrators.Administrators",
	HandlerType: (*AdministratorsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdminLogin",
			Handler:    _Administrators_AdminLogin_Handler,
		},
		{
			MethodName: "ProcessEnter",
			Handler:    _Administrators_ProcessEnter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "administrators.proto",
}
