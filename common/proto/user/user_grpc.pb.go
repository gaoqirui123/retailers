// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	User_UserLogin_FullMethodName          = "/user.User/UserLogin"
	User_UserRegister_FullMethodName       = "/user.User/UserRegister"
	User_SendSms_FullMethodName            = "/user.User/SendSms"
	User_UserDetail_FullMethodName         = "/user.User/UserDetail"
	User_ImproveUser_FullMethodName        = "/user.User/ImproveUser"
	User_UpdatedPassword_FullMethodName    = "/user.User/UpdatedPassword"
	User_UserLevelList_FullMethodName      = "/user.User/UserLevelList"
	User_UserLevelPowerList_FullMethodName = "/user.User/UserLevelPowerList"
	User_UserSignIn_FullMethodName         = "/user.User/UserSignIn"
	User_UserMakeupSignIn_FullMethodName   = "/user.User/UserMakeupSignIn"
	User_AddUsePower_FullMethodName        = "/user.User/AddUsePower"
	User_UsePowerList_FullMethodName       = "/user.User/UsePowerList"
	User_AddText_FullMethodName            = "/user.User/AddText"
	User_AddUserAddress_FullMethodName     = "/user.User/AddUserAddress"
	User_UserApplication_FullMethodName    = "/user.User/UserApplication"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	UserLogin(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error)
	UserRegister(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error)
	SendSms(ctx context.Context, in *SendSmsRequest, opts ...grpc.CallOption) (*SendSmsResponse, error)
	UserDetail(ctx context.Context, in *UserDetailRequest, opts ...grpc.CallOption) (*UserDetailResponse, error)
	ImproveUser(ctx context.Context, in *ImproveUserRequest, opts ...grpc.CallOption) (*ImproveUserResponse, error)
	UpdatedPassword(ctx context.Context, in *UpdatedPasswordRequest, opts ...grpc.CallOption) (*UpdatedPasswordResponse, error)
	UserLevelList(ctx context.Context, in *UserLevelListRequest, opts ...grpc.CallOption) (*UserLevelListResponse, error)
	UserLevelPowerList(ctx context.Context, in *UserLevelPowerListRequest, opts ...grpc.CallOption) (*UserLevelPowerListResponse, error)
	UserSignIn(ctx context.Context, in *UserSignInRequest, opts ...grpc.CallOption) (*UserSignInResponse, error)
	UserMakeupSignIn(ctx context.Context, in *UserMakeupSignInRequest, opts ...grpc.CallOption) (*UserMakeupSignInResponse, error)
	AddUsePower(ctx context.Context, in *AddUsePowerRequest, opts ...grpc.CallOption) (*AddUsePowerResponse, error)
	UsePowerList(ctx context.Context, in *UsePowerListRequest, opts ...grpc.CallOption) (*UsePowerListResponse, error)
	AddText(ctx context.Context, in *AddTextRequest, opts ...grpc.CallOption) (*AddTextResponse, error)
	AddUserAddress(ctx context.Context, in *AddUserAddressRequest, opts ...grpc.CallOption) (*AddUserAddressResponse, error)
	UserApplication(ctx context.Context, in *UserApplicationRequest, opts ...grpc.CallOption) (*UserApplicationResponse, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) UserLogin(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserLoginResponse)
	err := c.cc.Invoke(ctx, User_UserLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserRegister(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserRegisterResponse)
	err := c.cc.Invoke(ctx, User_UserRegister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SendSms(ctx context.Context, in *SendSmsRequest, opts ...grpc.CallOption) (*SendSmsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendSmsResponse)
	err := c.cc.Invoke(ctx, User_SendSms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserDetail(ctx context.Context, in *UserDetailRequest, opts ...grpc.CallOption) (*UserDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserDetailResponse)
	err := c.cc.Invoke(ctx, User_UserDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ImproveUser(ctx context.Context, in *ImproveUserRequest, opts ...grpc.CallOption) (*ImproveUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImproveUserResponse)
	err := c.cc.Invoke(ctx, User_ImproveUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdatedPassword(ctx context.Context, in *UpdatedPasswordRequest, opts ...grpc.CallOption) (*UpdatedPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatedPasswordResponse)
	err := c.cc.Invoke(ctx, User_UpdatedPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserLevelList(ctx context.Context, in *UserLevelListRequest, opts ...grpc.CallOption) (*UserLevelListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserLevelListResponse)
	err := c.cc.Invoke(ctx, User_UserLevelList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserLevelPowerList(ctx context.Context, in *UserLevelPowerListRequest, opts ...grpc.CallOption) (*UserLevelPowerListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserLevelPowerListResponse)
	err := c.cc.Invoke(ctx, User_UserLevelPowerList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserSignIn(ctx context.Context, in *UserSignInRequest, opts ...grpc.CallOption) (*UserSignInResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserSignInResponse)
	err := c.cc.Invoke(ctx, User_UserSignIn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserMakeupSignIn(ctx context.Context, in *UserMakeupSignInRequest, opts ...grpc.CallOption) (*UserMakeupSignInResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserMakeupSignInResponse)
	err := c.cc.Invoke(ctx, User_UserMakeupSignIn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddUsePower(ctx context.Context, in *AddUsePowerRequest, opts ...grpc.CallOption) (*AddUsePowerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddUsePowerResponse)
	err := c.cc.Invoke(ctx, User_AddUsePower_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UsePowerList(ctx context.Context, in *UsePowerListRequest, opts ...grpc.CallOption) (*UsePowerListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UsePowerListResponse)
	err := c.cc.Invoke(ctx, User_UsePowerList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddText(ctx context.Context, in *AddTextRequest, opts ...grpc.CallOption) (*AddTextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTextResponse)
	err := c.cc.Invoke(ctx, User_AddText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddUserAddress(ctx context.Context, in *AddUserAddressRequest, opts ...grpc.CallOption) (*AddUserAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddUserAddressResponse)
	err := c.cc.Invoke(ctx, User_AddUserAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserApplication(ctx context.Context, in *UserApplicationRequest, opts ...grpc.CallOption) (*UserApplicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserApplicationResponse)
	err := c.cc.Invoke(ctx, User_UserApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	UserLogin(context.Context, *UserLoginRequest) (*UserLoginResponse, error)
	UserRegister(context.Context, *UserRegisterRequest) (*UserRegisterResponse, error)
	SendSms(context.Context, *SendSmsRequest) (*SendSmsResponse, error)
	UserDetail(context.Context, *UserDetailRequest) (*UserDetailResponse, error)
	ImproveUser(context.Context, *ImproveUserRequest) (*ImproveUserResponse, error)
	UpdatedPassword(context.Context, *UpdatedPasswordRequest) (*UpdatedPasswordResponse, error)
	UserLevelList(context.Context, *UserLevelListRequest) (*UserLevelListResponse, error)
	UserLevelPowerList(context.Context, *UserLevelPowerListRequest) (*UserLevelPowerListResponse, error)
	UserSignIn(context.Context, *UserSignInRequest) (*UserSignInResponse, error)
	UserMakeupSignIn(context.Context, *UserMakeupSignInRequest) (*UserMakeupSignInResponse, error)
	AddUsePower(context.Context, *AddUsePowerRequest) (*AddUsePowerResponse, error)
	UsePowerList(context.Context, *UsePowerListRequest) (*UsePowerListResponse, error)
	AddText(context.Context, *AddTextRequest) (*AddTextResponse, error)
	AddUserAddress(context.Context, *AddUserAddressRequest) (*AddUserAddressResponse, error)
	UserApplication(context.Context, *UserApplicationRequest) (*UserApplicationResponse, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) UserLogin(context.Context, *UserLoginRequest) (*UserLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedUserServer) UserRegister(context.Context, *UserRegisterRequest) (*UserRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRegister not implemented")
}
func (UnimplementedUserServer) SendSms(context.Context, *SendSmsRequest) (*SendSmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSms not implemented")
}
func (UnimplementedUserServer) UserDetail(context.Context, *UserDetailRequest) (*UserDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDetail not implemented")
}
func (UnimplementedUserServer) ImproveUser(context.Context, *ImproveUserRequest) (*ImproveUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImproveUser not implemented")
}
func (UnimplementedUserServer) UpdatedPassword(context.Context, *UpdatedPasswordRequest) (*UpdatedPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatedPassword not implemented")
}
func (UnimplementedUserServer) UserLevelList(context.Context, *UserLevelListRequest) (*UserLevelListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLevelList not implemented")
}
func (UnimplementedUserServer) UserLevelPowerList(context.Context, *UserLevelPowerListRequest) (*UserLevelPowerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLevelPowerList not implemented")
}
func (UnimplementedUserServer) UserSignIn(context.Context, *UserSignInRequest) (*UserSignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSignIn not implemented")
}
func (UnimplementedUserServer) UserMakeupSignIn(context.Context, *UserMakeupSignInRequest) (*UserMakeupSignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserMakeupSignIn not implemented")
}
func (UnimplementedUserServer) AddUsePower(context.Context, *AddUsePowerRequest) (*AddUsePowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUsePower not implemented")
}
func (UnimplementedUserServer) UsePowerList(context.Context, *UsePowerListRequest) (*UsePowerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsePowerList not implemented")
}
func (UnimplementedUserServer) AddText(context.Context, *AddTextRequest) (*AddTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddText not implemented")
}
func (UnimplementedUserServer) AddUserAddress(context.Context, *AddUserAddressRequest) (*AddUserAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserAddress not implemented")
}
func (UnimplementedUserServer) UserApplication(context.Context, *UserApplicationRequest) (*UserApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserApplication not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserLogin(ctx, req.(*UserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserRegister(ctx, req.(*UserRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SendSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SendSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_SendSms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SendSms(ctx, req.(*SendSmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserDetail(ctx, req.(*UserDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ImproveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImproveUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ImproveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_ImproveUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ImproveUser(ctx, req.(*ImproveUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdatedPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatedPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdatedPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UpdatedPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdatedPassword(ctx, req.(*UpdatedPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserLevelList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLevelListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserLevelList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserLevelList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserLevelList(ctx, req.(*UserLevelListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserLevelPowerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLevelPowerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserLevelPowerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserLevelPowerList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserLevelPowerList(ctx, req.(*UserLevelPowerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserSignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserSignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserSignIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserSignIn(ctx, req.(*UserSignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserMakeupSignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMakeupSignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserMakeupSignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserMakeupSignIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserMakeupSignIn(ctx, req.(*UserMakeupSignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddUsePower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUsePowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddUsePower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_AddUsePower_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddUsePower(ctx, req.(*AddUsePowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UsePowerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsePowerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UsePowerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UsePowerList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UsePowerList(ctx, req.(*UsePowerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_AddText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddText(ctx, req.(*AddTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddUserAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddUserAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_AddUserAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddUserAddress(ctx, req.(*AddUserAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserApplication(ctx, req.(*UserApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserLogin",
			Handler:    _User_UserLogin_Handler,
		},
		{
			MethodName: "UserRegister",
			Handler:    _User_UserRegister_Handler,
		},
		{
			MethodName: "SendSms",
			Handler:    _User_SendSms_Handler,
		},
		{
			MethodName: "UserDetail",
			Handler:    _User_UserDetail_Handler,
		},
		{
			MethodName: "ImproveUser",
			Handler:    _User_ImproveUser_Handler,
		},
		{
			MethodName: "UpdatedPassword",
			Handler:    _User_UpdatedPassword_Handler,
		},
		{
			MethodName: "UserLevelList",
			Handler:    _User_UserLevelList_Handler,
		},
		{
			MethodName: "UserLevelPowerList",
			Handler:    _User_UserLevelPowerList_Handler,
		},
		{
			MethodName: "UserSignIn",
			Handler:    _User_UserSignIn_Handler,
		},
		{
			MethodName: "UserMakeupSignIn",
			Handler:    _User_UserMakeupSignIn_Handler,
		},
		{
			MethodName: "AddUsePower",
			Handler:    _User_AddUsePower_Handler,
		},
		{
			MethodName: "UsePowerList",
			Handler:    _User_UsePowerList_Handler,
		},
		{
			MethodName: "AddText",
			Handler:    _User_AddText_Handler,
		},
		{
			MethodName: "AddUserAddress",
			Handler:    _User_AddUserAddress_Handler,
		},
		{
			MethodName: "UserApplication",
			Handler:    _User_UserApplication_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
